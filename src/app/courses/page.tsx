'use client'

export const dynamic = 'force-dynamic'

import { DashboardLayout } from '@/components/layout/Layout'
import { BookOpen, Clock, Users, Star, Filter, Search } from 'lucide-react'

export default function CoursesPage() {
  // „É¢„ÉÉ„ÇØ„Ç≥„Éº„Çπ„Éá„Éº„Çø
  const courses = [
    {
      id: 1,
      title: 'ChatGPT„ÅÆÂü∫Êú¨Êìç‰Ωú„Å®„Éó„É≠„É≥„Éó„Éà‰ΩúÊàê',
      description: 'ChatGPT„Çí‰Ωø„ÅÑ„Åì„Å™„Åô„Åü„ÇÅ„ÅÆÂü∫Êú¨ÁöÑ„Å™Êìç‰ΩúÊñπÊ≥ï„Å®ÂäπÊûúÁöÑ„Å™„Éó„É≠„É≥„Éó„Éà„ÅÆ‰ΩúÊàêÊñπÊ≥ï„ÇíÂ≠¶„Å≥„Åæ„Åô„ÄÇ',
      department: 'AIÂü∫Á§éÂ≠¶ÈÉ®',
      difficulty: 'ÂàùÁ¥ö',
      duration: '2ÊôÇÈñì',
      enrolledCount: 1254,
      rating: 4.8,
      thumbnail: 'ü§ñ',
      tags: ['AI', 'ChatGPT', 'Âü∫Á§é'],
      price: 'ÁÑ°Êñô',
      isNew: true
    },
    {
      id: 2,
      title: '„Éá„Éº„ÇøÂàÜÊûê„Åß„Éì„Ç∏„Éç„Çπ„ÇíÊîπÂñÑ',
      description: 'Excel„ÇÑGoogle„Ç∑„Éº„Éà„Çí‰Ωø„Å£„ÅüÂü∫Êú¨ÁöÑ„Å™„Éá„Éº„ÇøÂàÜÊûêÊâãÊ≥ï„Å®„Éì„Ç∏„Éç„Çπ„Å∏„ÅÆÊ¥ªÁî®ÊñπÊ≥ï„ÇíÂÆüË∑µÁöÑ„Å´Â≠¶Áøí„Åó„Åæ„Åô„ÄÇ',
      department: '„Éá„Éº„Çø„Çµ„Ç§„Ç®„É≥„ÇπÂ≠¶ÈÉ®',
      difficulty: '‰∏≠Á¥ö',
      duration: '3ÊôÇÈñì',
      enrolledCount: 892,
      rating: 4.9,
      thumbnail: 'üìä',
      tags: ['„Éá„Éº„ÇøÂàÜÊûê', 'Excel', '„Éì„Ç∏„Éç„Çπ'],
      price: '„Éó„É¨„Éü„Ç¢„É†',
      isPopular: true
    },
    {
      id: 3,
      title: 'AI„ÉÑ„Éº„É´„Åß„Éó„É¨„Çº„É≥Ë≥áÊñô‰ΩúÊàê',
      description: 'AIÊîØÊè¥„ÉÑ„Éº„É´„ÇíÊ¥ªÁî®„Åó„Å¶ÂäπÁéáÁöÑ„Å´„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥Ë≥áÊñô„Çí‰ΩúÊàê„Åô„ÇãÊñπÊ≥ï„ÇíÂ≠¶„Å≥„Åæ„Åô„ÄÇ',
      department: 'Ê•≠ÂãôÂäπÁéáÂåñÂ≠¶ÈÉ®',
      difficulty: 'ÂàùÁ¥ö',
      duration: '1.5ÊôÇÈñì',
      enrolledCount: 734,
      rating: 4.7,
      thumbnail: 'üí°',
      tags: ['„Éó„É¨„Çº„É≥', 'AI', '„Éá„Ç∂„Ç§„É≥'],
      price: '„Éô„Éº„Ç∑„ÉÉ„ÇØ'
    },
    {
      id: 4,
      title: 'Python„ÅßÊ©üÊ¢∞Â≠¶ÁøíÂÖ•ÈñÄ',
      description: '„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞Ë®ÄË™ûPython„Çí‰Ωø„Å£„ÅüÊ©üÊ¢∞Â≠¶Áøí„ÅÆÂü∫Á§éÊ¶ÇÂøµ„Å®ÂÆüË£ÖÊñπÊ≥ï„ÇíÂ≠¶Áøí„Åó„Åæ„Åô„ÄÇ',
      department: 'AI„ÉªÊ©üÊ¢∞Â≠¶ÁøíÂ≠¶ÈÉ®',
      difficulty: '‰∏äÁ¥ö',
      duration: '5ÊôÇÈñì',
      enrolledCount: 456,
      rating: 4.6,
      thumbnail: 'üêç',
      tags: ['Python', 'Ê©üÊ¢∞Â≠¶Áøí', '„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞'],
      price: '„Éó„É¨„Éü„Ç¢„É†'
    },
    {
      id: 5,
      title: '„Éì„Ç∏„Éç„Çπ„É°„Éº„É´„ÇíAI„ÅßÂäπÁéáÂåñ',
      description: 'AI„ÉÑ„Éº„É´„Çí‰Ωø„Å£„Å¶„Éì„Ç∏„Éç„Çπ„É°„Éº„É´„ÅÆ‰ΩúÊàê„ÇíÂäπÁéáÂåñ„Åó„ÄÅ„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥ÂìÅË≥™„ÇíÂêë‰∏ä„Åï„Åõ„ÇãÊñπÊ≥ï„ÇíÂ≠¶„Å≥„Åæ„Åô„ÄÇ',
      department: 'Ê•≠ÂãôÂäπÁéáÂåñÂ≠¶ÈÉ®',
      difficulty: 'ÂàùÁ¥ö',
      duration: '1ÊôÇÈñì',
      enrolledCount: 987,
      rating: 4.5,
      thumbnail: 'üìß',
      tags: ['„É°„Éº„É´', 'AI', '„Ç≥„Éü„É•„Éã„Ç±„Éº„Ç∑„Éß„É≥'],
      price: 'ÁÑ°Êñô'
    },
    {
      id: 6,
      title: 'Web„Çµ„Ç§„ÉàÂà∂‰Ωú„ÇíAI„ÅßÂä†ÈÄü',
      description: 'AI„ÉÑ„Éº„É´„ÇíÊ¥ªÁî®„Åó„Å¶Web„Çµ„Ç§„ÉàÂà∂‰Ωú„ÅÆ„ÉØ„Éº„ÇØ„Éï„É≠„Éº„ÇíÂäπÁéáÂåñ„Åó„ÄÅÈñãÁô∫„Çπ„Éî„Éº„Éâ„ÇíÂêë‰∏ä„Åï„Åõ„ÇãÊâãÊ≥ï„ÇíÂ≠¶Áøí„Åó„Åæ„Åô„ÄÇ',
      department: 'WebÈñãÁô∫Â≠¶ÈÉ®',
      difficulty: '‰∏≠Á¥ö',
      duration: '4ÊôÇÈñì',
      enrolledCount: 623,
      rating: 4.8,
      thumbnail: 'üåê',
      tags: ['WebÈñãÁô∫', 'AI', '„ÉÑ„Éº„É´'],
      price: '„Éó„É¨„Éü„Ç¢„É†'
    }
  ]

  // Èõ£ÊòìÂ∫¶„Éê„ÉÉ„Ç∏„ÅÆËâ≤
  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'ÂàùÁ¥ö': return 'bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300'
      case '‰∏≠Á¥ö': return 'bg-yellow-100 dark:bg-yellow-900/50 text-yellow-700 dark:text-yellow-300'
      case '‰∏äÁ¥ö': return 'bg-red-100 dark:bg-red-900/50 text-red-700 dark:text-red-300'
      default: return 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
    }
  }

  // ‰æ°Ê†º„Éê„ÉÉ„Ç∏„ÅÆËâ≤
  const getPriceColor = (price: string) => {
    switch (price) {
      case 'ÁÑ°Êñô': return 'bg-green-100 dark:bg-green-900/50 text-green-700 dark:text-green-300'
      case '„Éô„Éº„Ç∑„ÉÉ„ÇØ': return 'bg-blue-100 dark:bg-blue-900/50 text-blue-700 dark:text-blue-300'
      case '„Éó„É¨„Éü„Ç¢„É†': return 'bg-purple-100 dark:bg-purple-900/50 text-purple-700 dark:text-purple-300'
      default: return 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'
    }
  }

  return (
    <DashboardLayout 
      title="„Ç≥„Éº„Çπ‰∏ÄË¶ß"
      description="AI„Çπ„Ç≠„É´„Çí‰ΩìÁ≥ªÁöÑ„Å´Â≠¶„Åπ„ÇãË±äÂØå„Å™„Ç≥„Éº„Çπ„Çí„ÅîÁî®ÊÑè„Åó„Å¶„ÅÑ„Åæ„Åô"
      actions={
        <div className="flex items-center space-x-3">
          <button className="flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800">
            <Filter className="w-4 h-4 mr-2" />
            „Éï„Ç£„É´„Çø„Éº
          </button>
          <button className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            <Search className="w-4 h-4 mr-2" />
            Ë©≥Á¥∞Ê§úÁ¥¢
          </button>
        </div>
      }
    >
      {/* Áµ±Ë®à„Çµ„Éû„É™„Éº */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center">
            <BookOpen className="w-8 h-8 text-blue-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900 dark:text-gray-100">{courses.length}</div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Á∑è„Ç≥„Éº„ÇπÊï∞</div>
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center">
            <Users className="w-8 h-8 text-green-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                {courses.reduce((sum, course) => sum + course.enrolledCount, 0).toLocaleString()}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Á∑èÂèóË¨õËÄÖÊï∞</div>
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center">
            <Star className="w-8 h-8 text-yellow-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                {(courses.reduce((sum, course) => sum + course.rating, 0) / courses.length).toFixed(1)}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">Âπ≥ÂùáË©ï‰æ°</div>
            </div>
          </div>
        </div>
        
        <div className="bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700 shadow-sm">
          <div className="flex items-center">
            <Clock className="w-8 h-8 text-purple-600 mr-3" />
            <div>
              <div className="text-2xl font-bold text-gray-900 dark:text-gray-100">
                {courses.filter(course => course.price === 'ÁÑ°Êñô').length}
              </div>
              <div className="text-sm text-gray-600 dark:text-gray-400">ÁÑ°Êñô„Ç≥„Éº„Çπ</div>
            </div>
          </div>
        </div>
      </div>

      {/* „Ç≥„Éº„Çπ‰∏ÄË¶ß */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {courses.map((course) => (
          <div key={course.id} className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 shadow-sm hover:shadow-md transition-shadow">
            {/* „Ç≥„Éº„Çπ„Çµ„É†„Éç„Ç§„É´ */}
            <div className="relative">
              <div className="h-48 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-t-xl flex items-center justify-center">
                <div className="text-6xl">{course.thumbnail}</div>
              </div>
              
              {/* „Éê„ÉÉ„Ç∏ */}
              <div className="absolute top-4 left-4 flex space-x-2">
                {course.isNew && (
                  <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium">
                    NEW
                  </span>
                )}
                {course.isPopular && (
                  <span className="bg-orange-500 text-white text-xs px-2 py-1 rounded-full font-medium">
                    ‰∫∫Ê∞ó
                  </span>
                )}
              </div>
              
              {/* ‰æ°Ê†º„Éê„ÉÉ„Ç∏ */}
              <div className="absolute top-4 right-4">
                <span className={`text-xs px-2 py-1 rounded-full font-medium ${getPriceColor(course.price)}`}>
                  {course.price}
                </span>
              </div>
            </div>

            {/* „Ç≥„Éº„ÇπÊÉÖÂ†± */}
            <div className="p-6">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm text-blue-600 dark:text-blue-400 font-medium">{course.department}</span>
                <span className={`text-xs px-2 py-1 rounded-full font-medium ${getDifficultyColor(course.difficulty)}`}>
                  {course.difficulty}
                </span>
              </div>
              
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2 line-clamp-2">
                {course.title}
              </h3>
              
              <p className="text-sm text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
                {course.description}
              </p>

              {/* „É°„ÇøÊÉÖÂ†± */}
              <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                <div className="flex items-center">
                  <Clock className="w-4 h-4 mr-1" />
                  {course.duration}
                </div>
                <div className="flex items-center">
                  <Users className="w-4 h-4 mr-1" />
                  {course.enrolledCount.toLocaleString()}
                </div>
                <div className="flex items-center">
                  <Star className="w-4 h-4 mr-1 text-yellow-500" />
                  {course.rating}
                </div>
              </div>

              {/* „Çø„Ç∞ */}
              <div className="flex flex-wrap gap-1 mb-4">
                {course.tags.map((tag, index) => (
                  <span key={index} className="text-xs bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 px-2 py-1 rounded">
                    {tag}
                  </span>
                ))}
              </div>

              {/* „Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
              <div className="flex space-x-2">
                <button className="flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium">
                  Â≠¶ÁøíÈñãÂßã
                </button>
                <button className="p-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
                  <BookOpen className="w-5 h-5 text-gray-600" />
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥ */}
      <div className="mt-12 flex justify-center">
        <div className="flex items-center space-x-2">
          <button className="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50">
            Ââç„Å∏
          </button>
          {[1, 2, 3].map((page) => (
            <button
              key={page}
              className={`px-3 py-2 rounded-lg ${
                page === 1 
                  ? 'bg-blue-600 text-white' 
                  : 'border border-gray-300 hover:bg-gray-50'
              }`}
            >
              {page}
            </button>
          ))}
          <button className="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
            Ê¨°„Å∏
          </button>
        </div>
      </div>
    </DashboardLayout>
  )
}

// Note: metadata export removed because this is now a client component