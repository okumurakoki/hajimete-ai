// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================
// User Management
// ====================

model User {
  id             String   @id @default(uuid()) @db.Uuid
  clerkId        String   @unique @map("clerk_id")
  email          String   @unique
  plan           String   @default("basic")
  subscriptionId String?  @map("subscription_id")
  status         String   @default("active")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  profile         UserProfile?
  preferences     UserPreferences?
  progress        LearningProgress[]
  registrations   SeminarRegistration[]
  subscriptions   Subscription[]
  achievements    UserAchievement[]
  ratings         VideoRating[]
  notifications   Notification[]
  sessions        UserSession[]
  streamViews     StreamViewer[]
  chatMessages    ChatMessage[]
  auditLogs       AuditLog[]
  instructedVideos Video[] @relation("VideoInstructor")
  instructorProfile Instructor?

  @@map("users")
}

model UserProfile {
  id                    String   @id @default(uuid()) @db.Uuid
  userId                String   @unique @map("user_id") @db.Uuid
  firstName             String?  @map("first_name") @db.VarChar(50)
  lastName              String?  @map("last_name") @db.VarChar(50)
  avatarUrl             String?  @map("avatar_url")
  departmentPreferences String[] @default([]) @map("department_preferences")
  learningGoals         Json     @default("{}") @map("learning_goals")
  timezone              String   @default("Asia/Tokyo")
  language              String   @default("ja")
  createdAt             DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserPreferences {
  id                 String  @id @default(uuid()) @db.Uuid
  userId             String  @unique @map("user_id") @db.Uuid
  emailNotifications Boolean @default(true) @map("email_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")
  marketingEmails    Boolean @default(false) @map("marketing_emails")
  videoQuality       String  @default("auto") @map("video_quality")
  playbackSpeed      Float   @default(1.0) @map("playback_speed")
  autoContinue       Boolean @default(true) @map("auto_continue")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// ====================
// Content Management
// ====================

model Department {
  id             String   @id @default(uuid()) @db.Uuid
  name           String   @unique @db.VarChar(100)
  slug           String   @unique @db.VarChar(100)
  description    String?
  colorPrimary   String?  @map("color_primary") @db.VarChar(7)
  colorSecondary String?  @map("color_secondary") @db.VarChar(7)
  icon           String?  @db.VarChar(10)
  accessLevel    String   @default("basic") @map("access_level")
  sortOrder      Int      @default(0) @map("sort_order")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  videos Video[]

  @@map("departments")
}

model Video {
  id             String    @id @default(uuid()) @db.Uuid
  title          String    @db.VarChar(200)
  description    String?
  slug           String?   @unique @db.VarChar(200)
  vimeoId        String?   @unique @map("vimeo_id")
  thumbnailUrl   String?   @map("thumbnail_url")
  duration       Int?      // seconds
  departmentId   String    @map("department_id") @db.Uuid
  level          String    @default("beginner")
  isPremium      Boolean   @default(false) @map("is_premium")
  instructorId   String?   @map("instructor_id") @db.Uuid
  instructorName String?   @map("instructor_name") @db.VarChar(100)
  status         String    @default("draft")
  tags           String[]  @default([])
  viewCount      Int       @default(0) @map("view_count")
  likeCount      Int       @default(0) @map("like_count")
  averageRating  Float     @default(0.0) @map("average_rating")
  uploadDate     DateTime? @map("upload_date") @db.Timestamptz(6)
  publishedAt    DateTime? @map("published_at") @db.Timestamptz(6)
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  department Department         @relation(fields: [departmentId], references: [id])
  instructor User?              @relation("VideoInstructor", fields: [instructorId], references: [id])
  progress   LearningProgress[]
  chapters   VideoChapter[]
  materials  VideoMaterial[]
  ratings    VideoRating[]
  analytics  VideoAnalytics[]

  @@map("videos")
}

model VideoChapter {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @map("video_id") @db.Uuid
  title     String   @db.VarChar(200)
  startTime Int      @map("start_time") // seconds
  duration  Int      // seconds
  sortOrder Int      @default(0) @map("sort_order")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_chapters")
}

model VideoMaterial {
  id            String   @id @default(uuid()) @db.Uuid
  videoId       String   @map("video_id") @db.Uuid
  name          String   @db.VarChar(200)
  fileUrl       String   @map("file_url")
  fileType      String?  @map("file_type") @db.VarChar(10)
  fileSize      BigInt?  @map("file_size")
  downloadCount Int      @default(0) @map("download_count")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_materials")
}

// ====================
// Learning Progress
// ====================

model LearningProgress {
  id                  String    @id @default(uuid()) @db.Uuid
  userId              String    @map("user_id") @db.Uuid
  videoId             String    @map("video_id") @db.Uuid
  progressPercentage  Int       @default(0) @map("progress_percentage")
  completedAt         DateTime? @map("completed_at") @db.Timestamptz(6)
  watchTime           Int       @default(0) @map("watch_time") // seconds
  lastPosition        Int       @default(0) @map("last_position") // seconds
  completionRate      Float     @default(0.0) @map("completion_rate")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("learning_progress")
}

model Achievement {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  description String?
  icon        String?  @db.VarChar(10)
  badgeColor  String?  @map("badge_color") @db.VarChar(7)
  criteria    Json?    // JSON criteria for earning
  points      Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  achievementId String   @map("achievement_id") @db.Uuid
  earnedAt      DateTime @default(now()) @map("earned_at") @db.Timestamptz(6)

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model VideoRating {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  videoId   String   @map("video_id") @db.Uuid
  rating    Int      // 1-5
  review    String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("video_ratings")
}

// ====================
// Seminars
// ====================

model Instructor {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String?  @unique @map("user_id") @db.Uuid
  name         String   @db.VarChar(100)
  bio          String?
  avatarUrl    String?  @map("avatar_url")
  specialties  String[] @default([])
  socialLinks  Json     @default("{}") @map("social_links")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user        User?        @relation(fields: [userId], references: [id])
  seminars    Seminar[]
  liveStreams LiveStream[]

  @@map("instructors")
}

model Seminar {
  id              String   @id @default(uuid()) @db.Uuid
  title           String   @db.VarChar(200)
  description     String?
  instructorId    String   @map("instructor_id") @db.Uuid
  date            DateTime @db.Date
  startTime       DateTime @map("start_time") @db.Time
  endTime         DateTime @map("end_time") @db.Time
  timezone        String   @default("Asia/Tokyo")
  capacity        Int      @default(100)
  registeredCount Int      @default(0) @map("registered_count")
  zoomMeetingId   String?  @map("zoom_meeting_id")
  zoomPasscode    String?  @map("zoom_passcode")
  zoomJoinUrl     String?  @map("zoom_join_url")
  isPremium       Boolean  @default(false) @map("is_premium")
  status          String   @default("upcoming")
  recordingUrl    String?  @map("recording_url")
  materials       Json     @default("[]")
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  instructor    Instructor            @relation(fields: [instructorId], references: [id])
  registrations SeminarRegistration[]

  @@map("seminars")
}

model SeminarRegistration {
  id                 String   @id @default(uuid()) @db.Uuid
  userId             String   @map("user_id") @db.Uuid
  seminarId          String   @map("seminar_id") @db.Uuid
  registeredAt       DateTime @default(now()) @map("registered_at") @db.Timestamptz(6)
  attended           Boolean  @default(false)
  attendanceDuration Int      @default(0) @map("attendance_duration") // seconds
  feedbackRating     Int?     @map("feedback_rating") // 1-5
  feedbackComment    String?  @map("feedback_comment")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  seminar Seminar @relation(fields: [seminarId], references: [id], onDelete: Cascade)

  @@unique([userId, seminarId])
  @@map("seminar_registrations")
}

// ====================
// Live Streaming
// ====================

model LiveStream {
  id                  String    @id @default(uuid()) @db.Uuid
  title               String    @db.VarChar(200)
  description         String?
  instructorId        String    @map("instructor_id") @db.Uuid
  cloudflareStreamId  String?   @unique @map("cloudflare_stream_id")
  streamKey           String?   @unique @map("stream_key")
  scheduledAt         DateTime? @map("scheduled_at") @db.Timestamptz(6)
  startedAt           DateTime? @map("started_at") @db.Timestamptz(6)
  endedAt             DateTime? @map("ended_at") @db.Timestamptz(6)
  status              String    @default("scheduled")
  isPremium           Boolean   @default(true) @map("is_premium")
  maxViewers          Int       @default(1000) @map("max_viewers")
  currentViewers      Int       @default(0) @map("current_viewers")
  peakViewers         Int       @default(0) @map("peak_viewers")
  recordingUrl        String?   @map("recording_url")
  thumbnailUrl        String?   @map("thumbnail_url")
  createdAt           DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  instructor   Instructor     @relation(fields: [instructorId], references: [id])
  viewers      StreamViewer[]
  chatMessages ChatMessage[]

  @@map("live_streams")
}

model StreamViewer {
  id            String    @id @default(uuid()) @db.Uuid
  streamId      String    @map("stream_id") @db.Uuid
  userId        String?   @map("user_id") @db.Uuid
  joinedAt      DateTime  @default(now()) @map("joined_at") @db.Timestamptz(6)
  leftAt        DateTime? @map("left_at") @db.Timestamptz(6)
  watchDuration Int       @default(0) @map("watch_duration") // seconds
  ipAddress     String?   @map("ip_address") @db.Inet
  userAgent     String?   @map("user_agent")

  stream LiveStream @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user   User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("stream_viewers")
}

model ChatMessage {
  id            String    @id @default(uuid()) @db.Uuid
  streamId      String    @map("stream_id") @db.Uuid
  userId        String?   @map("user_id") @db.Uuid
  username      String?   @db.VarChar(50)
  message       String
  messageType   String    @default("text") @map("message_type")
  isModerator   Boolean   @default(false) @map("is_moderator")
  isHighlighted Boolean   @default(false) @map("is_highlighted")
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedBy     String?   @map("deleted_by") @db.Uuid
  deletedReason String?   @map("deleted_reason")
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  stream    LiveStream      @relation(fields: [streamId], references: [id], onDelete: Cascade)
  user      User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  reactions ChatReaction[]

  @@map("chat_messages")
}

model ChatReaction {
  id        String   @id @default(uuid()) @db.Uuid
  messageId String   @map("message_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  reaction  String   @db.VarChar(10) // emoji
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  message ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, reaction])
  @@map("chat_reactions")
}

// ====================
// Subscriptions & Payments
// ====================

model SubscriptionPlan {
  id                       String   @id @default(uuid()) @db.Uuid
  name                     String   @db.VarChar(50)
  slug                     String   @unique @db.VarChar(50)
  description              String?
  priceMonthly             Int      @map("price_monthly") // in cents (JPY)
  priceYearly              Int?     @map("price_yearly") // in cents (JPY)
  stripePriceIdMonthly     String?  @map("stripe_price_id_monthly")
  stripePriceIdYearly      String?  @map("stripe_price_id_yearly")
  features                 Json     @default("[]")
  maxSimultaneousStreams   Int      @default(1) @map("max_simultaneous_streams")
  downloadEnabled          Boolean  @default(false) @map("download_enabled")
  offlineViewing           Boolean  @default(false) @map("offline_viewing")
  isActive                 Boolean  @default(true) @map("is_active")
  sortOrder                Int      @default(0) @map("sort_order")
  createdAt                DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  subscriptions Subscription[]

  @@map("subscription_plans")
}

model Subscription {
  id                    String    @id @default(uuid()) @db.Uuid
  userId                String    @map("user_id") @db.Uuid
  planId                String    @map("plan_id") @db.Uuid
  stripeSubscriptionId  String?   @unique @map("stripe_subscription_id")
  stripeCustomerId      String?   @map("stripe_customer_id")
  status                String
  currentPeriodStart    DateTime? @map("current_period_start") @db.Timestamptz(6)
  currentPeriodEnd      DateTime? @map("current_period_end") @db.Timestamptz(6)
  cancelAtPeriodEnd     Boolean   @default(false) @map("cancel_at_period_end")
  canceledAt            DateTime? @map("canceled_at") @db.Timestamptz(6)
  trialStart            DateTime? @map("trial_start") @db.Timestamptz(6)
  trialEnd              DateTime? @map("trial_end") @db.Timestamptz(6)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
  payments Payment[]

  @@map("subscriptions")
}

model Payment {
  id                      String    @id @default(uuid()) @db.Uuid
  userId                  String?   @map("user_id") @db.Uuid
  subscriptionId          String?   @map("subscription_id") @db.Uuid
  stripePaymentIntentId   String?   @unique @map("stripe_payment_intent_id")
  amount                  Int       // in cents
  currency                String    @default("JPY") @db.VarChar(3)
  status                  String
  paymentMethod           String?   @map("payment_method")
  invoiceUrl              String?   @map("invoice_url")
  receiptUrl              String?   @map("receipt_url")
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

// ====================
// Analytics & Logs
// ====================

model VideoAnalytics {
  id               String   @id @default(uuid()) @db.Uuid
  videoId          String   @map("video_id") @db.Uuid
  userId           String?  @map("user_id") @db.Uuid
  eventType        String   @map("event_type")
  timestampInVideo Int?     @map("timestamp_in_video") // seconds
  watchedDuration  Int      @default(0) @map("watched_duration") // seconds
  sessionId        String?  @map("session_id")
  ipAddress        String?  @map("ip_address") @db.Inet
  userAgent        String?  @map("user_agent")
  referrer         String?
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("video_analytics")
}

model UserSession {
  id           String    @id @default(uuid()) @db.Uuid
  userId       String    @map("user_id") @db.Uuid
  sessionId    String    @unique @map("session_id")
  startedAt    DateTime  @default(now()) @map("started_at") @db.Timestamptz(6)
  endedAt      DateTime? @map("ended_at") @db.Timestamptz(6)
  duration     Int       @default(0) // seconds
  pagesViewed  Int       @default(0) @map("pages_viewed")
  videosWatched Int      @default(0) @map("videos_watched")
  ipAddress    String?   @map("ip_address") @db.Inet
  userAgent    String?   @map("user_agent")
  deviceType   String?   @map("device_type")
  browser      String?
  os           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model AuditLog {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String?  @map("user_id") @db.Uuid
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  details      Json     @default("{}")
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model Notification {
  id         String    @id @default(uuid()) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  title      String    @db.VarChar(200)
  message    String
  type       String    @default("info")
  isRead     Boolean   @default(false) @map("is_read")
  actionUrl  String?   @map("action_url")
  actionText String?   @map("action_text")
  expiresAt  DateTime? @map("expires_at") @db.Timestamptz(6)
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}